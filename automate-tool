#!/usr/bin/env python

# copyright 2011-2012 Stefano Karapetsas <stefano@karapetsas.com>

# This file is part of AutoMate.
#
# AutoMate is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# AutoMate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with AutoMate.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import configobj
import cowbuilder
import functions
import os
import reprepro
import shutil
import sys

# check if user is root
functions.check_root()

# arguments
parser = argparse.ArgumentParser()
parser.add_argument("--prepare", action="store_true")
parser.add_argument("--create", action="store_true")
parser.add_argument("--update", action="store_true")
parser.add_argument("--update-pbuilderrc", action="store_true")
parser.add_argument("--skip-pbuilderrc", action="store_true")
parser.add_argument("--instance", type=str, default="automate")
args = parser.parse_args()

automate_path = os.path.dirname(os.path.realpath(__file__))
instance_path = os.path.join(automate_path, "instances", args.instance)

if args.prepare:

    if not os.path.exists(instance_path):
        os.makedirs(instance_path)

        # base folders
        for folder in ["upload", "builds", "queue", "run"]:
            os.mkdir(os.path.join(instance_path, folder))
        
        # configuration files
        shutil.copy("automate.conf.sample", os.path.join(instance_path, "automate.conf"))
        
        # cowbuilder
        os.makedirs(os.path.join(instance_path, "pbuilder"))
        
        # reprepro
        os.mkdir(os.path.join(instance_path, "repository"))
        
        os.system("chmod 777 -R %s/" % instance_path)

        print "\nInstance %s prepared" % args.instance
        print "Edit instances/%s/automate.conf, then execute the command:" % args.instance
        print "\t./automate-tool --create --instance %s" % args.instance
    
    else:
        
        print "E: %s instance already exists!" % args.instance
        sys.exit(1)

if args.create or args.update or args.update_pbuilderrc:
    
    if not args.skip_pbuilderrc:
        config = configobj.ConfigObj(os.path.join(instance_path, "automate.conf"))
        
        variables = {
            "extrapackages": config['extra_packages'],
            "mirror": config['mirror'],
            "automate_path": automate_path,
            "automate_www_path": config['automate_www_path'],
            "instance": args.instance
        }
        
        pbuilderrc_content = open("pbuilderrc.sample").read()
        
        for key in variables:
            
            pbuilderrc_content = pbuilderrc_content.replace("@" + key + "@", variables[key])
            
        pbuilderrc_file = open(os.path.join(instance_path, "pbuilderrc"), "w")
        pbuilderrc_file.write(pbuilderrc_content)
        pbuilderrc_file.close()

if args.create or args.update:
    
    if not os.path.exists("/usr/sbin/cowbuilder"):
        print "E: install cowbuilder package first!"
        sys.exit(1)
    
    if not os.path.exists("/usr/bin/reprepro"):
        print "E: install reprepro package first!"
        sys.exit(1)
    
    config = configobj.ConfigObj(os.path.join(instance_path, "automate.conf"))
    pbuilderrc_file = os.path.join(instance_path, "pbuilderrc")
    
    if args.create:
        # reprepro
        for dist in config.as_list('dists'):
            
            rp = reprepro.Reprepro(instance_path, dist, config.as_list('archs'))
            rp.create_config()
    
    # cowbuilder
    for dist in config.as_list('dists'):
        for arch in config.as_list('archs'):
    
            if args.create:
                os.makedirs(os.path.join(instance_path, "pbuilder", dist + "-" + arch, "base.cow"))
            
            cb = cowbuilder.CowBuilder(dist, arch, pbuilderrc_file, None, None)
            if args.create:
                ret = cb.create(True)
            elif args.update:
                ret = cb.update(True)
    
